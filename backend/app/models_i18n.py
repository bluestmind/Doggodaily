from app import db
from datetime import datetime

class Language(db.Model):
    """Model for supported languages"""
    __tablename__ = 'languages'
    
    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String(10), nullable=False, unique=True)  # e.g., 'en', 'it', 'es'
    name = db.Column(db.String(100), nullable=False)  # e.g., 'English', 'Italian', 'Spanish'
    native_name = db.Column(db.String(100), nullable=False)  # e.g., 'English', 'Italiano', 'EspaÃ±ol'
    flag_emoji = db.Column(db.String(10), nullable=True)  # e.g., 'ðŸ‡ºðŸ‡¸', 'ðŸ‡®ðŸ‡¹', 'ðŸ‡ªðŸ‡¸'
    is_active = db.Column(db.Boolean, default=True)
    is_default = db.Column(db.Boolean, default=False)
    sort_order = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'code': self.code,
            'name': self.name,
            'native_name': self.native_name,
            'flag_emoji': self.flag_emoji,
            'is_active': self.is_active,
            'is_default': self.is_default,
            'sort_order': self.sort_order,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f'<Language {self.code}: {self.name}>'

class Translation(db.Model):
    """Model for page content translations"""
    __tablename__ = 'translations'
    
    id = db.Column(db.Integer, primary_key=True)
    page_name = db.Column(db.String(100), nullable=False)  # e.g., 'book_page', 'home_page'
    section_name = db.Column(db.String(100), nullable=False)  # e.g., 'hero', 'author'
    content_key = db.Column(db.String(100), nullable=False)  # e.g., 'title', 'description'
    language_code = db.Column(db.String(10), nullable=False)  # e.g., 'en', 'it'
    content_value = db.Column(db.Text, nullable=True)
    content_type = db.Column(db.String(50), default='text')  # text, html, json
    is_auto_translated = db.Column(db.Boolean, default=False)  # True if generated by AI/API
    translation_confidence = db.Column(db.Float, default=1.0)  # 0.0 to 1.0
    needs_review = db.Column(db.Boolean, default=False)  # Flag for manual review
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Composite unique constraint
    __table_args__ = (
        db.UniqueConstraint('page_name', 'section_name', 'content_key', 'language_code', 
                          name='unique_translation'),
        db.Index('idx_page_section_key', 'page_name', 'section_name', 'content_key'),
        db.Index('idx_language', 'language_code'),
    )
    
    def to_dict(self):
        return {
            'id': self.id,
            'page_name': self.page_name,
            'section_name': self.section_name,
            'content_key': self.content_key,
            'language_code': self.language_code,
            'content_value': self.content_value,
            'content_type': self.content_type,
            'is_auto_translated': self.is_auto_translated,
            'translation_confidence': self.translation_confidence,
            'needs_review': self.needs_review,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f'<Translation {self.page_name}.{self.section_name}.{self.content_key} [{self.language_code}]>'

class TranslationTemplate(db.Model):
    """Model for translation templates and patterns"""
    __tablename__ = 'translation_templates'
    
    id = db.Column(db.Integer, primary_key=True)
    template_name = db.Column(db.String(100), nullable=False)  # e.g., 'book_page_default'
    page_name = db.Column(db.String(100), nullable=False)
    section_name = db.Column(db.String(100), nullable=False)
    content_key = db.Column(db.String(100), nullable=False)
    default_language = db.Column(db.String(10), default='en')
    template_content = db.Column(db.Text, nullable=False)  # Default content in default language
    content_type = db.Column(db.String(50), default='text')
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'template_name': self.template_name,
            'page_name': self.page_name,
            'section_name': self.section_name,
            'content_key': self.content_key,
            'default_language': self.default_language,
            'template_content': self.template_content,
            'content_type': self.content_type,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f'<TranslationTemplate {self.template_name}: {self.page_name}.{self.section_name}.{self.content_key}>'


